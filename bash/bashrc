#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
#{{{1  prepare the environment

# escape if environment already loaded
test -z "$PS1" && return

unalias -a
export ETC="$HOME/etc"

function _load() {
	if test -r "$1"; then
		source "$1"
	fi
}
_load "$ETC/bash/functions"


#{{{1 global variables

SOURCE_EXTENSIONS='d pl pm sh js java py rb c h cpp cxx C hxx hpp'
SOURCE_EXTGLOB='*.{d,pl,pm,sh,js,java,py,rb,c,h,cpp,cxx,C,hxx,hpp}'


#{{{1 lazy-loading of functions

for i in "$ETC/bash/"*.sh; do
	f="$( basename "$i" | sed 's/\.sh$//' )"
	alias $f="call $f"
	unset f
done; unset i

function call()
{
	local f="$1"; shift
	local t="$(type -t "$f" 2>/dev/null)"

	if test "$t" == "alias"; then
		local a="$( alias "$f" | cut -d "'" -f 2 )"
		if test "$a" == "call $f"; then
			unalias "$f"
			t="$( type -t "$f" 2>/dev/null )"
		fi
	fi

	if test "$t" != "function"; then
		local s="$ETC/bash/$f.sh"
		if test -r "$s"; then
			source "$s" ""
		fi
	fi

	"$f" "$@"
}


#{{{1  load local stuff from .bashrc_local

_load "$HOME/.bashrc_local"


#{{{1 software setup

export LANG="en_US.UTF-8"
export LANGUAGE="$LANG"
export LC_COLLATE="C"

export LESS='-X -F -M -R -f -J -W -j4'
export PAGER='less'
export MANPAGER="$PAGER"
#export MANPAGER="col -b | view -c 'set ft=man nomod nolist' -"
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

export EDITOR="vim"
export SVN_EDITOR="$EDITOR"
export GREP_OPTIONS='--exclude="*.svn-base" --exclude="\.git"'
export GREP_COLOR="1;33"
export TIG_DIFF_OPTS='-b'

# paths
export DERELICT_DIR='/home/sft/d/derelict'
export CHOICESPATH="${HOME}/.Choices:/usr/local/share/Choices:/usr/share/Choices"

# dev
export ACLOCAL_FLAGS='-I /usr/local/share/aclocal'


#{{{1 path

add_to_path \
		-t "/usr/sbin" \
		-t "/sbin" \
#		-h "/usr/local/lib/cw" \

alias dif="$ETC/scripts/dif.sh"
alias undeaf="$ETC/util/undeaf.sh"
alias path2tag="$ETC/scripts/path2tag.pl"
alias vimv="$ETC/scripts/vimv.sh"
alias web="$ETC/scripts/web.pl"


#{{{1          aliases and functions that mask existing programs

function mv() {
	local target="${!#}"
	local dir
	if [[ "$target" =~ '/$' ]]; then
		dir="$target"
	else
		dir="$(dirname "$target")"
	fi
	test -d "$dir" || mkdir -vp "$dir"
	command mv "$@"
}

alias mv='mv -i'
if [ "$OSTYPE" == "linux-gnu" ]; then
alias grep='grep --exclude="*.svn-base" --exclude=".git" --devices=skip --color=auto'
alias greps='grep $(for i in $SOURCE_EXTENSIONS; do echo --include="*."$i; done)'
alias cp='cp -i --preserve=timestamps'
fi

alias lsof='lsof -nP'
alias qiv='qiv -e'
alias rdesktop='rdesktop  -x m -P -a 8 -z'
#alias tar='tar --exclude=.svn --exclude=CVS'
alias tig='tig --all'
alias wget='wget -c --timeout=15 --wait=0 --tries=0'
alias xpdf='xpdf -z width'
alias xxd='xxd -c $(( (($COLUMNS - 10)/7)*2 ))'

#{{{1 ls

if [ "$OSTYPE" == "linux-gnu"  -a  "$TERM" != "dumb" ]; then
	eval "`dircolors -b`"
	alias ls='ls --color=auto'
fi


# long format
alias d='ls -lF'

# custumized long format
function f() {
	\ls -FGhln --color=always --time-style=long-iso "$@" |
	sed 's/^[^\ ]\+\ \+[^\ ]\+\ \+[^\ ]\+\ \+\(.....?\)\ \(20[^\ ]\+\ [^\ ]\+\)\ \(.*\)$/\2\ \ [0;37m\1\ \ \3/'
}

# same as `f`, sorted by timestamp
alias z='f -rt'

# du
alias F='find . -maxdepth 1 -not -name . -exec du -shc {} +'

# short format; with single column if fits screen, multi otherwise
function a() {
    local n=$( ls "$@" | wc -l )
	if test $n -gt 0; then
		if test $n -lt $(( $LINES / 2 )); then
			ls -1F "$@"
		else
			ls -F "$@"
		fi
	fi
}

# same as `a`, but only on source files
alias c='a $SOURCE_EXTGLOB 2>/dev/null'

# -A version of `a` and `d`
alias A='a -A'
alias D='d -A'


# deprecated stuff:
#alias _sd='find -type d -maxdepth 1 -name "[^\.]*" -print0 | xargs -0 du -sc | sed "s/\.\///" | sort -n'
#alias _sf='find -type f -maxdepth 1 -name "[^\.]*" -print0 | xargs -0 du -sc | sed "s/\.\///" | sort -n'
#alias sz='_sf; ls -F | grep -q \/$ && _sd; echo $(echo $(du -s .)|cut -d \  -f 1) $(du -sh .)'
#alias dz='du -shc * | grep -v "^0" | grep "[0-9][MG]"'


#{{{1 abbreviations

alias OFF='transmission_stop && sudo poweroff'
alias p='ps -AH --format "%U %p %a"'
alias l='less'
alias cn='cat > /dev/null' # quick volatile writepad
alias data='date +%Y-%m-%d'
function h()
{ #{{{
	if test "$1" == ""; then
		head -$(( 2 * $LINES / 3 )) "$@"
	else
		head "$@"
	fi
} #}}}


alias u='if test $( ls *.rar 2>/dev/null | wc -l ) == 1; then unrar x *.rar && rm *.rar; elif test $( ls *.zip 2>/dev/null | wc -l ) == 1; then unzip *.zip && rm *.zip; else echo \?; fi'

alias pgw='ping gw'
alias pwl='ping wl'
alias pgo='ping google.com'

alias gitv='vim "$(git rev-parse --show-toplevel)"/.git/index -c "Gitv --all" -c "tabonly"'
alias gk='(while test ! -d .git -a "$PWD" != /; do cd .. || exit; done; test -d .git && ( exec gitk --all & ) || echo .git not found)'
alias gs.="gs |\grep -v '\.\.\/'"
alias gsl='git stash list'
alias gspop='git stash pop'
function gri() {
	if test -n "$1"; then
		git rebase -i "$@"
	else
		git rebase -i "origin"
	fi
}
function gl() {
	git log --pretty=format:"%h %Cblue%cr%Creset %cn %Cred%d %Cgreen%s%Creset" --graph --all "$@" \
	| sed 's/\((\|,\ \)refs\/\w\+\//\1/g;s/origin\//o\//g' \
	| less
}
alias gr='(git log --color --stat -1; git diff -b --word-diff --color HEAD~ HEAD)|less'
alias gspop='git stash pop'
alias gsp='git_stash_do pull'
alias gsd='git_stash_do svn dcommit'
alias gsr='git_stash_do svn rebase'
alias gsdo='git_stash_do'
function git_stash_do()
{
	if git status --porcelain | grep -q '^M'; then
		echo 'You have changes marked to be commited:'
		git status --short | grep -q '^M'
	elif git status --porcelain | grep -q '^ M'; then
		echo '[stash]'     &&  git stash       && \
		echo "[$@]"        &&  git "$@"        && \
		echo '[stash pop]' &&  git stash pop
	else
		git "$@"
	fi
}

alias configure='nice ./configure --disable-nls'
alias mk="if test -f build.ninja; then nice ninja; else nice make -j $(( `show cpus` + 1 )); fi"
alias rmk='make clean && mk'
alias rcmk='test $(basename "$PWD") == build && test -e ../CMakeLists.txt && /bin/rm -rf * && cmake ..'
alias cm='configure && mk'
alias conf='./configure --help && read a && configure $a'
alias confh='./configure --help | less'
alias cmi='conf && mk && mki'
alias qpro='rm Makefile *.pro; qmake -project && qmake && make clean'

alias mpw='while pgrep -l mplayer || pgrep -l mpv; do sleep 2s; done'
alias mpf='mpv --fs --osd-level=0'
alias mpq='mpv --aid=no --osd-level=0'
alias mpdvd='mplayer -identify dvd://1 -dvd-device "$PWD"'
alias mistureba='mplayer http://paineldj4.com.br:8136/stream'
function clima()
{
	curl http://wttr.in/"$*"
}
alias ytdl='youtube-dl -t -c --max-quality=22'
alias ion='ionice -c2 -n7'

alias Con="( files=\$(git status --porcelain | grep '^UU' | cut -d ' ' -f 2-); if test -n \"\$files\"; then vim -o \$files +'set nofoldenable' +/'^\(=======$\|<<<<<<< \|>>>>>>> \)'; else echo 'No conflict.'; fi )"
alias TODO="( files=\$(grep -rl '\<\(TODO\|FIXME\|XXX\|HACK\)\>' $SOURCE_EXTGLOB 2>/dev/null); if test -n \"\$files\"; then vim -o \$files +'set nofoldenable' +/'\<\(TODO\|FIXME\|XXX\|HACK\)\>'; else echo 'Nothing to do.'; fi )"

if test -e /etc/debian_version; then

	alias apt='sudo ionice -c2 -n7 aptitude'

elif test -e /etc/arch-release; then

	alias pac='sudo pacman --needed'
	alias pacs='pacman -Ss'
	alias ya='yaourt --needed'
	alias yas='yaourt -Ss'
	alias pacu='sudo yaourt -Syu; slurpy -u'

elif test -e /etc/slackware-version; then

	alias pkg='web --linux-packages'
	alias sl='web --slackware'

	alias sip='sudo installpkg'
	alias srp='sudo removepkg'
	alias sup='sudo upgradepkg'

fi


#___
#}}}
#{{{  version control

alias svnbk='svnadmin dump /home/svn | bzip2 -9 > bart.svndump.`date +%Y-%m-%d`.bz2'

function svndiff() {
	svn diff $args \
		--diff-cmd /usr/bin/diff -x \
		"-U 5 -rpbB --ignore-all-space --ignore-blank-lines" \
		"$@"
}
function svndif_tmp() {
	local args
	if test "$1" == "-h"; then
		shift
		args="-r BASE:HEAD"
	fi
	tmp=`mktemp /tmp/svndif.XXXXXX`
	svndiff $args "$@" >| "$tmp" || return
	test -s "$tmp" && echo "$tmp" || /bin/rm "$tmp"
}
function svndif() {
	tmp=`svndif_tmp "$@"`; test "$tmp" || return
	vim +'set filetype=diff' +'set nomodified' "$tmp"
	/bin/rm "$tmp"
}

function svnci() {
	tmp=`svndif_tmp "$@"`; test "$tmp" || return
	SVN_EDITOR="vim -o \"$tmp\" +\"set filetype=diff\"" svn commit "$@"
	/bin/rm "$tmp"
}

function ci() {
	if test -d .svn; then
		svnci "$@"
	elif test -d CVS; then
		echo 'nao sei fazer CVS ainda'
	else # assumes git
		tmp=`mktemp /tmp/gitdif.XXXXXX` || return
		git-diff "$@" >| "$tmp" || return
		if test -s "$tmp"; then
			tmp2=`mktemp /tmp/gitdif.XXXXXX` || return
			echo "#!/bin/sh" >> $tmp2 || return
			echo "vim -c \"set filetype=diff\" -c \"set nofen\" -o \"$tmp\" \"\$@\"" >> $tmp2 || return
			chmod +x $tmp2 || return
			test "$*" && quem="$@" || quem=-a
			EDITOR="$tmp2" git-commit $quem
			rm "$tmp2"
		fi
		rm "$tmp"
	fi
}

function svnst() {
	svn st "$@" | grep -v '^\?'
}

function update() {
	if test -d .svn; then
		local rev1=`svn info | grep '^Revision:' | cut -d ' ' -f 2`
		echo "Local revision: $rev1"
		svn up "$@"
		local rev2=`svn info | grep '^Revision:' | cut -d ' ' -f 2`
		if test "$rev1" != "$rev2"; then
			local dif="svndif -r $rev1:$rev2"
			echo "$dif"
			echo "`date +%Y-%m-%d`  $dif" >> .svn/_updates
		fi
	elif test -d .git; then
		git pull "$@"
	elif test -d CVS; then
		cvs -z3 -q up -dP "$@" | grep -v '^\?' #grep -v '^cvs\ update:\ Updating\ ' #grep nao funciona pq ta no stderr
	else
		echo 'Found no ".svn", "CVS", or ".git" directory.'
		false
	fi
}


#}}} version control
#{{{ #TODO: organizar o resto abaixo..
#{{{1          util

# quick edit&reload this file
alias ea='vim ~/.bashrc && source ~/.bashrc'

alias www='ifconfig | grep "192\."; python -m SimpleHTTPServer'

alias taillog='sudo tail -f $(file $(sudo find /var/log -type f -not -name "*.[0-9]*") | grep text | cut -d : -f 1)'
alias rawbatch='ufraw-batch --wb=camera --gamma=0.45 --linearity=0.10 --exposure=0 --restore=lch --clip=digital --saturation=1.0 --wavelet-denoising-threshold=0.0 --base-curve=camera --curve=linear --black-point=0.0 --interpolation=ahd --color-smoothing --grayscale=none'
#      --base-curve-file=/dev/null
#      --curve-file=<curve-file>
#      --darkframe=FILE
alias rawhd='rawbatch --out-type=jpeg --compression=96 --size=1920x1080'
alias rawn10='rawbatch --out-type=jpeg --compression=96 --size=2560x1600'
alias rawpreview='rawbatch --out-type=jpeg --compression=80 --size=`show res`'

#TODO: move this to foto.pl
alias jpg2raw='test -d shot && cd shot; for i in *; do test -f ../`sed "s/.cr2$/.jpg/" <<< "$i"` || mv -v $i ../.qiv-trash/; done; unset i'
alias mvufraw='for z in *.ufraw; do d="$HOME/fotos/$(echo "$z"|sed "s/^\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\).*$/\1\/\2\/\3/")/"; if test -f "$d/$z"; then diff -u "$d/$z" "$z"; else mv -iv "$z" "$d"; fi; done'

alias kb='$ETC/desktop/switch-kbmap.sh'

function lddr()  # ldd "recursivo": faz ldd das bibliotecas nao-padrao mostradas pelo ldd
{ #{{{
	for i in "$@"; do
		ldd $( ldd "$i" | cut -d '>' -f 2 | cut -d ' ' -f 2 | grep -v '^/\(usr\|lib\)' )
	done; unset i
} #}}}

alias reconnect='sudo kill `pidof dhclient`; sudo ifconfig eth0 down; sudo dhclient'
#alias reconnect='sudo ifconfig eth0 down; sudo ifconfig eth0 192.168.1.4 netmask 255.255.255.0 && route add default gw 192.168.1.1'

function do_crun() {
	local cc="$1"; shift
	local aout=`mktemp /tmp/crun.XXXXXX`
	$cc "$@" -o "$aout" - && "$aout"
	`which rm` -f "$aout"
}

function crun() {
	do_crun "gcc -x c" "$@"
}

function Crun() {
	do_crun "g++ -x c++" "$@"
}

function cmain() {
	(
	cat <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>
int main (int argc, char* argv[])
{
EOF
	cat
	cat << EOF
	return 0;
}
EOF
	) | crun
}

function Cmain() {
	(
	cat <<EOF
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
int main (int argc, char* argv[])
{
EOF
	cat
	cat << EOF
	return 0;
}
EOF
	) | Crun
}

#{{{1          misc

#{{{2 warn about uncommited changes

uncommited=""
for dir in $working_dirs; do
	if svn st $dir|grep '^M'|head -1>/dev/null; then
		uncommited="$uncommited $dir"
		break
	fi
done; unset dir
if test -n "$uncommited"; then
	echo "uncommited: $uncommited"
fi
unset uncommited

#}}}

alias ph='vi ~/src/txt/phonebook.txt'

alias grepsmallnear='find . -type f -maxdepth 2 -size -10k -not -name "* *" | xargs grep'
#alias r='xset r'
#alias k='sudo kbdrate -r 30 -d 250'
#alias caps='xmodmap -e "keysym Caps_Lock = Escape"'
alias caps='xmodmap -e "remove Lock = Caps_Lock" -e "keysym Caps_Lock = Escape"'
alias geom="xwininfo -root | sed -rn '/-geometry/s/[^0-9]*([0-9]+x[0-9]+).*/\1/p'"
alias 2view='convert -quality 80 -resize `geom`'
alias dt='$ETC/scripts/dtool.pl'
alias vd='dt vd'

function waitload() {
	while true; do
		local threshold=40
		local load=`cat /proc/loadavg | sed 's/\.//;s/^0//' | cut -d " " -f 1`
		if test $load -gt $threshold; then
			echo "load($load) > threshold($threshold)"
			sleep 5s
		else
			echo "load($load) < threshold($threshold)"
			break
		fi
	done
}

#alias mem='free; kill `pidof WMxmms`; sleep 1s; WMxmms &; sleep 1s; dk kill; sleep 1s; ml &; sleep 3s; free'
alias updb='sudo updatedb &'



export GDK_USE_XFT=1

alias fu='du -sc * | sort -n'
#alias www='webfsd -d -F -p 8080 -r .'
alias ntop='sudo jnettop'
#alias w1='cd ~/fotos/incoming && sudo gphoto2 -P'
#alias w1='source /home/barrett/bin/w1'

#alias dif='diff --unified=5 --show-c-function --recursive --ignore-all-space'
#alias dif='diff --unified=5 --show-c-function --recursive --ignore-space-change --ignore-blank-lines --ignore-all-space'

#alias lm='nice lame -m s -v -h -V 2 -b 32 -B 320'
alias lm='for i in *.wav *.flac; do job nice lame -v "$i" "$(sed "s/wav$/mp3/;s/flac$/mp3/" <<< "$i")"; done; unset i'
alias stereo="$ETC/util/flac2mp3.sh"
alias mono="$ETC/util/flac2mp3.sh --mono"
#alias v='gvim -geom 80x50 +"set guioptions-=T" +"set guioptions-=m" -font "-misc-fixed-medium-r-semicondensed-*-*-120-*-*-c-*-iso8859-1"'

alias mame='xmame.x11 -rompath .'

function mkcd() { mkdir -p "$1" && cd "$1"; }
function cd..() {
	local dir="$PWD"
	cd .. || return
	read -p "rm -rf \"$dir\" (y/[n])? " || return
	test "$REPLY" == "y" -o "$REPLY" == "r" || return
	rm -rf "$dir"
}

function _x() {
	echo "$*"
	echo "$*" | /bin/sh
}

function Seq() {
	seq $* | sed s/^[0-9]$/0\&/
}

alias cdq='cdparanoia -Q'
function cdp() {
	test "$1" -gt 1 && (
		for i in $(seq $* | sed s/^[0-9]$/0\&/); do
			cdparanoia -z $i $i.wav
		done; unset i
		cdeject
	)
}

function bk() {
	local bkdir="$HOME/BACKUP"
	local n
	let n=$(wc -c <<< "$1") - 1
	local dir
	if test / == $( cut -b $n <<< "$1" ); then
		dir="$( cut -b 1-$(($n - 1)) <<< "$1" )"
	else
		dir="$1"
	fi
	
	if test -d "$dir"; then
		local basename="$bkdir/$dir.`date +%Y-%m-%d`"
		local name="$basename.tgz"
		if test -e "$name"; then
			for i in a b c d e f g h i j; do
				name="$basename$i".tgz
				if test ! -e "$name"; then
					_x " tar cfz \"$name\" \"$dir\" "
					break
				fi
			done; unset i
		else
			_x " tar cfz \"$name\" \"$dir\" "
		fi
	else
		echo bk: $dir: not a directory
		false
	fi
}


# TRASH trash
# which() {
#	alias | grep "^alias\ $1="
#	declare -f | /usr/bin/which --all --read-functions $@ 2> /dev/null
# }
#export -f which

export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jpg=01;35:*.png=01;35:*.gif=01;35:*.bmp=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.png=01;35:*.mpg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:';

alias black='xsetroot -solid black'


#{{{1 shell setup

export INPUTRC="$HOME/.inputrc"
if true && [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

if test -t 0 ; then
	stty -ixon -ixoff
fi

#test "$TERM" == "vt100" && export TERM="xterm"

# append on history, instead of overwriting
shopt -s histappend

# check the window size after each command,
# updating $LINES and $COLUMNS if necessary
shopt -s checkwinsize

# vi mode for command prompt editing
set -o vi

# prohibits overwriting files with '>'.
# use '>|' to force overwriting.
set -o noclobber


#{{{ ulimit

 MemTotal=$( cat /proc/meminfo | sed  '/^MemTotal/!d;s/^[^0-9]*\([0-9]\+\).*/\1/' )
SwapTotal=$( cat /proc/meminfo | sed '/^SwapTotal/!d;s/^[^0-9]*\([0-9]\+\).*/\1/' )

# core file size          (blocks, -c) 0
ulimit -S -c $(( 32 * 1024 ))

# max locked memory       (kbytes, -l) unlimited
ulimit -S -l $(( 512 * 1024 )) 2>/dev/null  #FIXME: check if I can

case "$OSTYPE" in
	*linux*)
		# file size               (blocks, -f) unlimited
		ulimit -S -f $(( 20 * 1024*1024 ))

		# max user processes              (-u) unlimited
		ulimit -S -u 1024

		# file locks                      (-x) unlimited
		if [ $BASH_VERSINFO -ge 3 ]; then
			ulimit -S -x 128
		fi

		# data seg size           (kbytes, -d) unlimited
		ulimit -S -d $(( $MemTotal / 2 ))

		# max memory size         (kbytes, -m) unlimited
		ulimit -S -m $(( $MemTotal / 2 ))

		# virtual memory          (kbytes, -v) unlimited
		ulimit -S -v $(( ( 3 * $MemTotal ) / 4 ))
	;;
esac


#}}}


#}}}
#{{{ the command prompt

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
# Explicitly unset color (default anyhow). Use 1 to set it.
GIT_PS1_SHOWCOLORHINTS=
GIT_PS1_DESCRIBE_STYLE="branch"
GIT_PS1_SHOWUPSTREAM="auto git"
source "$ETC/sys/git-prompt.sh"

export HISTCONTROL="ignoreboth"
PS1_sty="$(cut -d . -f 2 <<< $STY)"
PS1='\[\e[1;33m\]\t\[\e[0;1;37m\] [$PS1_sty.$WINDOW] \u@\h \[\e[1;32m\]\w\[\e[1;31m\]$(__git_ps1)\[\e[0m\]\n\$ '
export PS1
export THE_PS1=$PS1

function titlebar()
{
	case "$*" in trap|trap\ *|cd|cd\ *|ls|ls\ *|screen|screen\ *) return ;; esac
	local t="$(cut -d \  -f 1 <<< "$*")"
	if test -n "$WINDOW" -a "$t" != "trap"; then
		screen -X title "$t"
		my_title="$t"
	fi
}

if test -n "$WINDOW"; then
	PROMPT_COMMAND='trap DEBUG; if test -n "$WINDOW"; then my_t="${PWD/$HOME/~}"; if test "$my_t" != "$my_title"; then screen -X title "$my_t"; my_title="$my_t"; unset my_t; fi; fi; trap "titlebar \$BASH_COMMAND" debug'
fi

trap 'titlebar $BASH_COMMAND' DEBUG

#}}}
#{{{1  local stuff from .bashrc_local_post

_load "$HOME/.bashrc_local_post"


#}}}
# vim600:foldmethod=marker:
