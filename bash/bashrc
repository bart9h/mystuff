# ~/.bashrc: executed by bash(1) for non-login shells.
#{1  prepare the environment, and load local stuff

# escape if environment already loaded
test -z "$PS1" && return

unalias -a

# for profiling and debugging
function _progress() {
	if false; then
		printf "\r%-*s" $COLUMNS "$*"
	fi
}

# Default values for some global variables...
prompt_color='1;30'
working_dirs=
# ...that can be overwrited here.
. "$HOME/src/bash/functions"

if test -r "$HOME/.bashrc_local"; then
	_progress '~/.bashrc_local'
	source "$HOME/.bashrc_local"
fi


#{1 software setup

export DMD_DIR='/opt/dmd'


#{1 path

add_to_path \
		-h "$HOME/bin" \
		-h "$DMD_DIR/bin" \
		-t "/usr/sbin" \
		-t "/sbin" \
#		-h "/usr/local/lib/cw" \

function call()
{
	local f="$1"; shift
	if test "$(type -t "$f" 2>/dev/null)" != "function"; then	
		local s="$HOME/etc/bash/$f.sh"
		if test -r "$s"; then
			source "$s"
		fi
	fi
	"$f" "$@"
}

alias dif="$HOME/src/scripts/dif.sh"
alias undeaf="$HOME/src/util/undeaf.sh"
alias path2tag="$HOME/src/scripts/path2tag.pl"
alias vimv="$HOME/src/scripts/vimv.sh"
alias web="$HOME/src/scripts/web.pl"



#{1          aliases and functions that mask existing programs

alias cp='cp -i --preserve=timestamps'

alias mv='mv -i'

function rm()
{ #{
	#set +o functrace
	file_count=0
	for i in "$@"; do
		if ! expr match "$i" "\-*" > /dev/null; then
			if test -e "$i"; then
				file_count=$(( $file_count + 1 ))
			else
				/bin/rm "$i"
				return
			fi
		fi
	done
	if test $file_count -eq 0; then
		echo "no files" > /dev/stderr
		return
	elif test $file_count -gt 1; then
		ls -d "$@"
		read -p "remove $file_count items (y/n) [y]? " answer
		test "$answer" == "y" -o "$answer" == "" || return
	fi
	/bin/rm "$@"
} #}

alias vi='vim'
alias xxd='xxd -c $(( (($COLUMNS - 10)/7)*2 ))'
alias wget='wget -c --timeout=15 --wait=0 --tries=0'
alias xpdf='xpdf -z width'
alias grep='grep --exclude="*.svn-base" --devices=skip'
#alias tar='tar --exclude=.svn --exclude=CVS'


#{1 ls

_progress 'ls'

if [ "$TERM" != "dumb" ]; then
	eval "`dircolors -b`"
	alias ls='ls --color=auto'
fi

alias A='a -A'  # single column if fits screen, multi otherwise
alias D='d -A'  # ls' long listing format
alias F='f -A'  # with size/date/time info
alias Z='Z -A'  # like F, but ordered by date

# the lowercase versions (that don't show hidden files):
function a() {
    local n=$( ls "$@" | wc -l )
	if test $n -gt 0; then
		if test $n -lt $(( $LINES / 2 )); then
			ls -1F "$@"
		else
			ls -F "$@"
		fi  
	fi
}
alias c='a *.{c,d,h,sh,pl,java,cpp,cxx,C} 2>/dev/null'
alias d='ls -lF'
function f() {
	\ls -FGhln --color=always --time-style=long-iso "$@" |
	sed 's/^[^\ ]\+\ \+[^\ ]\+\ \+[^\ ]\+\ \+\(....\)\ \(20[^\ ]\+\ [^\ ]\+\)\ \(.*\)$/\2\ \ [0;37m\1\ \ \3/'
}
alias z='f -rt'

# deprecated stuff:
#alias _sd='find -type d -maxdepth 1 -name "[^\.]*" -print0 | xargs -0 du -sc | sed "s/\.\///" | sort -n'
#alias _sf='find -type f -maxdepth 1 -name "[^\.]*" -print0 | xargs -0 du -sc | sed "s/\.\///" | sort -n'
#alias sz='_sf; ls -F | grep -q \/$ && _sd; echo $(echo $(du -s .)|cut -d \  -f 1) $(du -sh .)'
#alias dz='du -shc * | grep -v "^0" | grep "[0-9][MG]"'


#{1          info

function show() {
	case "$1" in
	ansi|colors)
		for b in 0 1; do
			for j in 3 4; do
				i=0
				while test $i -le 7; do
					echo -ne "\e[${b};${j}${i}m [$b;$j$i] "
					let i=i+1
				done
				echo -e "\e[0;0m"
			done
		done
	;;
	processors|cpus)
		cat /proc/cpuinfo | grep '^processor\>' | wc -l
	;;
	resolution|res|rez)
		echo $(xwininfo -root|grep Width:|cut -d : -f 2)x$(xwininfo -root|grep Height:|cut -d : -f 2|sed s/\ //g)
	;;
	sizeof)
		shift
		test -z "$1" && echo "sizeof what?" && return
		local arg
		while true; do
			case "$1" in
			-*)
				arg="$arg $1"
				shift
				;;
			*)
				break
				;;
			esac
		done
		echo -e "#include <stdio.h>\n#include <time.h>\nint main() { printf(\"%d\\\n\", sizeof($*)); return 0; }" | crun $arg
	;;
	*)
		echo "things to show: colors, cpus, resolution, sizeof"
	;;
	esac
}


#{1 abbreviations

_progress 'abbreviations'

alias apt='sudo aptitude'


#{1 frontend functions

#{ screen

function s() {
	which screen >/dev/null || return

	# if no arg, list existing screens
	if test "$1" == ""; then
		screen -wipe | grep '([AD][te]tached)'

	# if arg is existing screen, attach
	elif test "$1" != "." && screen -ls | grep "\<[0-9]*\.$1\>"; then
			screen -x "$1"

	else  # create screen
		local session_name

		# if arg is existing dir, cd into, else arg is session name
		test -d "$1" && cd "$1" || session_name="$1"

		# defult session name is $PWD
		test "$session_name" -o "$session_name" == "." || session_name="`basename "$PWD"`"

		screen -S "$session_name"
	fi
}

#} screen

#{ xmms2
# With no args, list;
# if args are files or dirs, add (or radd) them;
# else pass args to xmms2.

function x()
{
	if ! pidof xmms2d >/dev/null; then
		( exec xmms2d >| $HOME/var/log/xmms2d.log 2>&1 )&
	fi

	if test "$1" == ""; then
		xmms2 list
	else
		while test "$1"; do
			if test -d "$1"; then
				xmms2 radd "$1"
				shift
			elif test -e "$1"; then
				xmms2 add "$1"
			else
				xmms2 "$@"
				break
			fi
			shift
		done
	fi
}

#} xmms2

#{  version control

_progress 'version control frontend'

alias svnbk='svnadmin dump /home/svn | bzip2 -9 > bart.svndump.`date +%Y-%m-%d`.bz2'

function svndiff() {
	svn diff $args \
		--diff-cmd /usr/bin/diff -x \
		"-U 5 -rpbB --ignore-all-space --ignore-blank-lines" \
		"$@"
}
function svndif_tmp() {
	local args
	if test "$1" == "-h"; then
		shift
		args="-r BASE:HEAD"
	fi
	tmp=`mktemp /tmp/svndif.XXXXXX`
	svndiff $args "$@" >| "$tmp" || return
	test -s "$tmp" && echo "$tmp" || /bin/rm "$tmp"
}
function svndif() {
	tmp=`svndif_tmp "$@"`; test "$tmp" || return
	vim +'set filetype=diff' +'set nomodified' "$tmp"
	/bin/rm "$tmp"
}

function svnci() {
	tmp=`svndif_tmp "$@"`; test "$tmp" || return
	SVN_EDITOR="vim -o \"$tmp\" +\"set filetype=diff\"" svn commit "$@"
	/bin/rm "$tmp"
}

function ci() {
	if test -d .svn; then
		svnci "$@"
	elif test -d CVS; then
		echo 'nao sei fazer CVS ainda'
	else # supoe git
		tmp=`mktemp /tmp/gitdif.XXXXXX` || return
		git-diff "$@" >| "$tmp" || return
		if test -s "$tmp"; then
			tmp2=`mktemp /tmp/gitdif.XXXXXX` || return
			echo "#!/bin/sh" >> $tmp2 || return
			echo "vim -c \"set filetype=diff\" -c \"set nofen\" -o \"$tmp\" \"\$@\"" >> $tmp2 || return
			chmod +x $tmp2 || return
			test "$*" && quem="$@" || quem=-a
			EDITOR="$tmp2" git-commit $quem
			rm "$tmp2"
		fi
		rm "$tmp"
	fi
}

function svnst() {
	svn st "$@" | grep -v '^\?'
}

function update() {
	if test -d .svn; then
		local rev1=`svn info | grep '^Revision:' | cut -d ' ' -f 2`
		echo "Local revision: $rev1"
		svn up "$@"
		local rev2=`svn info | grep '^Revision:' | cut -d ' ' -f 2`
		if test "$rev1" != "$rev2"; then
			local dif="svndif -r $rev1:$rev2"
			echo "$dif"
			echo "`date +%Y-%m-%d`  $dif" >> .svn/_updates
		fi
	elif test -d .git; then
		git pull "$@"
	elif test -d CVS; then
		cvs -z3 -q up -dP "$@" | grep -v '^\?' #grep -v '^cvs\ update:\ Updating\ ' #grep nao funciona pq ta no stderr
	else
		echo 'Found no ".svn", "CVS", or ".git" directory.'
		false
	fi
}

#export CVS_RSH=ssh
#export CVSROOT=:ext:9h:/home/9hells/cvsroot

#} version control

#___
#}
#TODO: organizar o resto abaixo..
#{1 software setup

_progress 'software setup'

export LANG="en_US.UTF-8"
export LANGUAGE="$LANG"
export LC_COLLATE="C"

export LESS='-X -F -M -R -f -a -j4'
export PAGER="less $LESS"
export MANPAGER="$PAGER"
#export MANPAGER="col -b | view -c 'set ft=man nomod nolist' -"
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

export EDITOR="vim"
export SVN_EDITOR="$EDITOR"
export GREP_OPTIONS='--exclude="*.svn-base"'

# paths
export DERELICT_DIR='/home/sft/d/derelict'
export LD_LIBRARY_PATH='.'
export PKG_CONFIG_PATH='/usr/local/lib/pkgconfig:/usr/lib/pkgconfig'
export CHOICESPATH="${HOME}/.Choices:/usr/local/share/Choices:/usr/share/Choices"

# dev
export ACLOCAL_FLAGS='-I /usr/local/share/aclocal'

# shell
export INPUTRC="$HOME/.inputrc"
if false && [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

# aliases
alias vi='vim'
alias pgr='pgrep -l'
alias cdrec='sudo cdrecord -v dev=/dev/cdrom'
function q4() {
	if true; then
		# metodo menos drastico, impede somente DNS, mantendo conexoes atuais abertas
		a='/etc/resolv.conf'
		b='/etc/__disabled__resolv.conf'
		sudo mv $a $b || return
		(sleep 90s; sudo mv $b $a) &
	else
		sudo ifconfig eth0 down || return
		(sleep 90s; sudo ~/src/etc/neton) &
	fi
	/home/games/quake4/quake4
}


#{1          util

_progress 'util'

# quick edit&reload this file
alias ea='vi ~/.bashrc && source ~/.bashrc'

alias rawbatch='ufraw-batch --wb=auto --exposure=auto --out-type=jpeg --compression=80'

alias raw2jpg='rawbatch --size=`show res` --out-path=.. *'

#TODO: move this to foto.pl
alias jpg2raw='test -d shot && cd shot; for z in *; do test -f ../`echo $z|sed "s/.cr2$/.jpg/"` || mv -v $z ../.qiv-trash/; done'

alias kb='~/src/desktop/switch-kbmap'

job()  # manage background jobs
{ #{

	if test -z "$*"; then
		ls "$spool_dir"
		return
	fi

	let max_jobs=`show cpus`+1
	spool_dir="/tmp/jobs"

	test -d "$spool_dir" || mkdir "$spool_dir" || exit

	while test $( ls "$spool_dir" | wc -l ) -ge $max_jobs; do
		sleep 1s
	done

	(
		job=$( mktemp "$spool_dir"/job.XXXXXX )
		test -f "$job" || exit
		"$@"
		rm "$job"
	)&
} #}

function lddr()  # ldd "recursivo": faz ldd das bibliotecas nao-padrao mostradas pelo ldd
{ #{
	for z in "$@"; do
		ldd $( ldd "$z" | cut -d '>' -f 2 | cut -d ' ' -f 2 | grep -v '^/\(usr\|lib\)' )
	done
} #}

# network
alias pgo='ping google.com'
alias reconnect='sudo ifconfig eth0 down; sudo dhclient'
#alias reconnect='sudo ifconfig eth0 down; sudo ifconfig eth0 192.168.1.4 netmask 255.255.255.0 && route add default gw 192.168.1.1'

function crun() {
	local aout=`mktemp /tmp/crun.XXXXXX`
	gcc $* -x c -o "$aout" - && "$aout" && rm "$aout"
}


#{1          misc

#{2 warn about uncommited changes

uncommited=""
for dir in $working_dirs; do
	if svn st $dir|grep '^M'|head -1>/dev/null; then
		uncommited="$uncommited $dir"
		break
	fi
done
if test -n "$uncommited"; then
	echo "uncommited: $uncommited"
fi
unset uncommited

#}

_progress 'misc'

alias ph='vi ~/src/txt/phonebook.txt'

# utils

if test -e /etc/slackware-version; then
	alias pkg='web --linux-packages'
	alias sl='web --slackware'
fi

alias t='source ~/src/scripts/untar.sh'
alias l='less'
alias grepsmallnear='find . -type f -maxdepth 2 -size -10k -not -name "* *" | xargs grep'
#alias r='xset r'
#alias k='sudo kbdrate -r 30 -d 250'
#alias caps='xmodmap -e "keysym Caps_Lock = Escape"'
alias caps='xmodmap -e "remove Lock = Caps_Lock" -e "keysym Caps_Lock = Escape"'
alias data='date +%Y-%m-%d'
alias geom="xwininfo -root | sed -rn '/-geometry/s/[^0-9]*([0-9]+x[0-9]+).*/\1/p'"
alias 2view='convert -quality 80 -resize `geom`'
alias cn='cat > /dev/null' # quick volatile writepad
alias dt='~/src/scripts/dtool.pl'
alias vd='dt vd'

function waitload() {
	while true; do
		local threshold=40
		local load=`cat /proc/loadavg | sed 's/\.//;s/^0//' | cut -d " " -f 1`
		if test $load -gt $threshold; then
			echo "load($load) > threshold($threshold)"
			sleep 5s
		else
			echo "load($load) < threshold($threshold)"
			break
		fi
	done
}

#alias mem='free; kill `pidof WMxmms`; sleep 1s; WMxmms &; sleep 1s; dk kill; sleep 1s; ml &; sleep 3s; free'
alias updb='sudo updatedb &'

# build tools
alias configure='nice ./configure --disable-nls'
alias mk="nice make -j `show cpus`"
alias cm='configure && mk'
alias conf='./configure --help && read a && configure $a'
alias confh='./configure --help | less'
alias cmi='conf && mk && mki'
alias qpro='rm Makefile *.pro; qmake -project && qmake && make clean'

function mki() {
	local args
	case "$1" in
	NVIDIA-Linux-*|*/NVIDIA-Linux-*)
		sudo sh "$1" \
				--silent \
				--no-network
	;;

	*)
	date=`date +%Y%m%d`
	name="`basename $PWD`"
	[ "$name" == "src" ] && name="`basename $(cd ..; echo $PWD)`"

	if test -d 'CVS'; then
		args="--pkgversion=cvs.$date"
	elif test -d '.svn'; then
		args="--pkgversion=svn.$date"
	elif test -d '.git'; then
		args="--pkgversion=git.$date"
	else
		name="`echo "$name" | cut -d - -f 1`"
	fi

	if test -f SConstruct -o -f Sconstruct -o -f sconstruct; then
		cmd="scons install"
	else
		cmd="make install"
	fi

	if test -e /etc/slackware-version; then
		t=slackware
	elif test -e /etc/debian_version; then
		t=debian
	else
		echo 'rpm sucks'; false; return
	fi

	cmd="sudo checkinstall --fstrans=no --type=$t --nodoc --pkgname=\"$name\" $args $CHECKINSTALL_ARGS $cmd"
	echo "$cmd"
	read -p "proceed ([y]/n)? " answer
	test "$answer" == "y" -o "$answer" == "" || return
	$cmd
	;;
	esac
}


# pkgtools
alias sip='sudo installpkg'
alias srp='sudo removepkg'
alias sup='sudo upgradepkg'


export GDK_USE_XFT=1

alias fu='du -sc * | sort -n'
#alias www='webfsd -d -F -p 8080 -r .'
alias ntop='sudo jnettop'
#alias w1='cd ~/fotos/incoming && sudo gphoto2 -P'
#alias w1='source /home/barrett/bin/w1'

#alias osd='osd_cat -p middle -A center -d 1 -s 3 -c yellow -f "-*-helvetica-bold-r-*-*-24-*-*-*-*-*-*-*"'

#alias dif='diff --unified=5 --show-c-function --recursive --ignore-all-space'
#alias dif='diff --unified=5 --show-c-function --recursive --ignore-space-change --ignore-blank-lines --ignore-all-space'
alias mpf='mplayer -fs -osdlevel 0'
alias mpq='mplayer -nosound -osdlevel 0'
alias mpr='ls -Q | rl | xargs mplayer -fs'
alias mprq='ls -Q | rl | xargs mplayer -fs -ao null'

alias g9='gkrellm -w -s 9h &'
alias irc='irssi -n barrett9h -c irc.freenode.net'
#alias lm='nice lame -m s -v -h -V 2 -b 32 -B 320'
alias lm='for z in *.wav; do nice lame -v "$z" "`echo $z | sed s/wav$/mp3/`"; done'
alias treo='nice lame -m j -v -f'
#alias v='gvim -geom 80x50 +"set guioptions-=T" +"set guioptions-=m" -font "-misc-fixed-medium-r-semicondensed-*-*-120-*-*-c-*-iso8859-1"'

alias mame='xmame.x11 -rompath .'
alias bkp='cd ~/src; for z in ~/BACKUP /d/backup /d/tmp ; do echo $z ; tar cfz $z/palito.$(data).tgz palito ; done ; cd -'

alias p='ps -AH --format "%U %p %a"'

function head() {
	if test "$1" == ""; then
		`which head` -$(( 2 * $LINES / 3 )) "$@"
	else
		`which head` "$@"
	fi
}

function mkcd() { mkdir "$1" && cd "$1"; }
function cd..() {
	dir="$PWD"
	cd .. || return
	read -p "rm -rf \"$dir\" (y/[n])? " || return
	test "$REPLY" == "y" -o "$REPLY" == "r" || return
	rm -rf "$dir"
}

function _x() {
	echo "$*"
	echo "$*" | /bin/sh
}

function v() {
	if test "$1"; then
		vim $@
	else
		vim .
	fi
}

function Seq() {
	seq $* | sed s/^[0-9]$/0\&/
}

alias cdq='cdparanoia -Q'
function cdp() {
	test "$1" -gt 1 && (
		for z in $(seq $* | sed s/^[0-9]$/0\&/); do
			cdparanoia -z $z $z.wav
		done
		cdeject
			)
}

function bk() {
	bkdir="$HOME/BACKUP"
	n=$(( $( echo $1 | wc -c ) - 1 ))
	if test / == $( echo $1 | cut -b $n ); then
		dir="$( echo $1 | cut -b 1-$(($n - 1)) )"
	else
		dir="$1"
	fi
	
	if test -d "$dir"; then
		basename="$bkdir/$dir.`date +%Y-%m-%d`"
		name="$basename.tgz"
		if test -e "$name"; then
			for z in a b c d e f g h i j; do
				name="$basename$z".tgz
				if test ! -e "$name"; then
					_x " tar cfz \"$name\" \"$dir\" "
					break
				fi
			done
		else
			_x " tar cfz \"$name\" \"$dir\" "
		fi
	else
		echo bk: $dir: not a directory
		false
	fi
}

function sortdir() {
	#FIXME: doesn't work for hidden files/dirs within
	#TODO: check read-only permission before starting
	#TODO: recursive
	local arg
	if test "$1" == ""; then
		echo "usage: sortdir [-v] <directory> [<directory> ...]"
	else
		while test "$1"; do
			if test "$1" == "-v"; then
				arg="-v"
			elif test -d "$1"; then
				local tmpdir="_sortdir_tmp"
				mv $arg "$1" "$tmpdir" && \
				mkdir $arg "$1" && \
				mv $arg "$tmpdir"/* "$1" && \
				rmdir $arg "$tmpdir" \
				|| return
			fi
			shift
		done
	fi
}


# TRASH trash
# which() {
#	alias | grep "^alias\ $1="
#	declare -f | /usr/bin/which --all --read-functions $@ 2> /dev/null
# }
#export -f which

export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jpg=01;35:*.png=01;35:*.gif=01;35:*.bmp=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.png=01;35:*.mpg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:';

alias tetrinet='tetrinet -noslide -fancy bart9h games03.click21.com.br'
alias ponte='mplayer mms://200.246.17.121/pontelive'


alias u='if test -e *.rar; then rar x *.rar && rm *.rar; elif test -e *.zip; then unzip *.zip && rm *.zip; fi'
alias k='sudo kbdrate -r 30 -d 200'
alias black='xsetroot -solid black'


#{1 shell setup

if test -t 0 ; then
	stty -ixon -ixoff
fi

_progress 'shell setup'

#test "$TERM" == "vt100" && export TERM="xterm"

# append on history, instead of overwriting
shopt -s histappend

# check the window size after each command,
# updating $LINES and $COLUMNS if necessary
shopt -s checkwinsize

# vi mode for command prompt editing
set -o vi

# prohibits overwriting files with '>'.
# use '>|' to force overwriting.
set -o noclobber


#{ ulimit

# core file size          (blocks, -c) 0
ulimit -c $(( 32 * 1024 ))

# max locked memory       (kbytes, -l) unlimited
ulimit -l $(( 512 * 1024 )) 2>/dev/null  #FIXME: check if I can

case $OSTYPE in
	*linux*)
		# data seg size           (kbytes, -d) unlimited
		ulimit -d $(( 800 * 1024 ))

		# file size               (blocks, -f) unlimited
		ulimit -f $(( 20 * 1024*1024 ))

		# max memory size         (kbytes, -m) unlimited
		ulimit -m $(( 800 * 1024 ))

		# max user processes              (-u) unlimited
		ulimit -u 1024

		# virtual memory          (kbytes, -v) unlimited
		ulimit -v $(( 1500 * 1024 ))

		# file locks                      (-x) unlimited
		if [ $BASH_VERSINFO -ge 3 ]; then
			ulimit -x 128
		fi
	;;
esac


#}

#{ the command prompt

export HISTCONTROL="ignoreboth"
PS1='\[\e[0;'$prompt_color'm\]\t [`echo $STY|cut -d . -f 2`.$WINDOW] \u@\h \w\n\$\[\e[0m\] '
export PS1
export THE_PS1=$PS1
#export PROMPT_COMMAND='echo -ne "\033]0;[`echo $STY|cut -d . -f 2`.${WINDOW}] ${PWD}\007"'
#PROMPT_COMMAND='test "$TERM" == "screen" && echo -ne "\ek`basename "$PWD"`/\e\\"'

if test -n "$DISPLAY"; then
	PROMPT_COMMAND='echo -ne "\033]0;${PWD/$HOME/~}\007"'
fi

if false; then

function titlebar() {
	test "$TERM" == "screen" || return
	local s="$*"
	case "$s" in cd|cd\ *|ls\ *) return ;; esac
	s="`echo $s | cut -d \  -f 1`"
	echo -ne "\ek$s\e\\"
}

if echo "$BASH_VERSION" |  grep -q '^3\.1\..*'; then
	set -o functrace
	trap 'titlebar $BASH_COMMAND' DEBUG
fi

fi

#}


#{1 host-specific

#}
_progress ''
# vim600:foldmethod=marker:foldmarker=#{,#}:
