"{{{1 Vundle plugin manager

set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()
Plugin 'gmarik/vundle'

" nativagion
Plugin                    'a.vim'           " jump to alternate (.h) file and back
"Plugin           'pechorin/any-jump.vim'    " jump to definition / reference / usage
Plugin 'ludovicchabant/vim-gutentags'       " automatically generate ctags
Plugin            'HiPhish/info.vim'        " browse GNU Info articles
Plugin                    'netrw.vim'       " file browser
Plugin        'romainl/vim-qf'              " quickfix enhancements
Plugin          'tpope/vim-vinegar'         " enhances netrw

" git integration
Plugin          'tpope/vim-fugitive'        " git integration
Plugin           'junegunn/gv.vim'          " browse git history
Plugin          'mhinz/vim-signify'         " quick per-line git diff status

" language specific
Plugin         'bart9h/vim-cpp-modern'      " better C++ highlighting
Plugin         'lifepillar/pgsql.vim'       " PostgreSQL syntax highlighting
Plugin        'fedorenchik/qt-support.vim'  " Qt's QML and qmake.pro
Plugin         'gregsexton/MatchTag'        " highlight matching HTML/XML tags

" misc
Plugin          '907th/vim-auto-save'       " activate with :AutoSaveToggle
Plugin          'tpope/vim-commentary'      " comment/uncomment stuff with gc
Plugin          'tpope/vim-eunuch'          " interface to shell commands
Plugin          'tpope/vim-flagship'        " nicer statusline and tabline
Plugin  'gruvbox-community/gruvbox'         " colorscheme
Plugin          'tpope/vim-obsession'       " :Obsession to start recording a session
Plugin          'tpope/vim-repeat'          " make . work with plugins
Plugin          'tpope/vim-surround'        " cs({ change, ds( remove, ys{ add

call vundle#end()

set updatetime=100
let g:gutentags_enabled=0


"{{{1  behaviour

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim
set tags+=$HOME/.cache/ctags/tags

packadd! matchit

set encoding=utf-8
set noincsearch
set mouse=
unlet c_comment_strings

set nobackup
set noswapfile

set hidden
set switchbuf=useopen

set wildmode=list:longest,full
set nostartofline
set modeline
set modelines=3


" From
" https://vim.fandom.com/wiki/Keep_folds_closed_while_inserting_text
"
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif


"{{{1 tab

set tabstop=4
set shiftwidth=4
set nosmarttab
set softtabstop=0
set noexpandtab


"{{{1 visual

syntax on
set hlsearch
set winminheight=0
set laststatus=2
set listchars=tab:‣\ ,space:·
set number

let loaded_matchparen=1   " don't highlight matching ()[]{}s
let perl_extended_vars=1  " highlight perl $extended->{variables}
let perl_fold=1

highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/

try
	let g:gruvbox_contrast_dark = 'medium'
	let g:gruvbox_contrast_light = 'hard'
	colorscheme gruvbox
catch /^Vim\%((\a\+)\)\=:E185/
	colorscheme my-elflord
endtry

set background=dark

if has("gui_running")
	set novisualbell
	set guioptions -=T
	set guifont=Inconsolata\ 12
	hi CursorLine guibg=#0000b0 guifg=white
else
	set t_Co=256
	hi! link Operator GruvboxYellow
	hi Cursor ctermbg=yellow ctermfg=black
endif


"{{{1  key mappings

" obtain/put diff of whole file
nmap dO :%diffget<CR>
nmap dP :%diffput<CR>

" swap ' and ` (makes ' go to exact position)
noremap ' `
noremap ` '

"disable ex mode
nnoremap Q <nop>

" <c-l> also clear search highlight
nnoremap <C-L> :nohlsearch<CR>

" toggle spell cheching
nmap <F8> :set spelllang=en spell!<CR>

" quick macro replay
nmap <F9> @q
nmap <leader>. @q

" makes * highlight the word, but don't jump to next occurrence
"map <silent> * yiw:let @/="\\<".@0."\\>"<CR>:set hls<CR>

" diff selections
vmap <leader>1 "ay
vmap <leader>2 "by:tabnew<CR>"bP:diffthis<CR>:set buftype=nofile<CR>:vnew<CR>"aP:set buftype=nofile<CR>:diffthis<CR>

" resize window
nmap <C-kPlus> <C-W>+
nmap <C-kMinus> <C-W>-


"{{{1  <leader> key mappings

map <space> <leader>

nmap <leader>V :split $MYVIMRC<CR>
nmap <leader>S :source $MYVIMRC<CR>

" Avoid jumping or moving the cursor when using <*>.
function Set_cword_to_search()
	let @/='\<' . expand('<cword>') . '\>'
endfunction
map <silent> * :call Set_cword_to_search()<CR>

" Use <leader>* to add cword to the search pattern,
" so it's possible to search multiple words at wonce.
function Add_cword_to_search()
	if @/ != ''
		let @/='\(' . @/ . '\)\|\(\<' . expand('<cword>') . '\>\)'
	else
		Set_cword_to_search()
	endif
endfunction
nmap <leader>* :call Add_cword_to_search()<CR>

" navitage through compiler errors
nmap <leader>n :cnext<CR>
nmap <leader>p :cprevious<CR>

" close/open folders
"nmap <leader><space> za

" switch buffers
nmap <leader>b :Buffers<CR><CR>
nmap <leader><space> <leader>bj<CR>
nmap <leader>o :Old<CR><CR>
nmap <leader>z :b#<CR>

" tabs
nmap <leader>t :tabnew<CR>
nmap <leader>T :0tabnew<CR>
nmap <leader><tab> :tabnext<CR>

" search for current word on all source files (<l>ocal and <g>lobal)
"nmap <leader>l  :vimgrep /\<<cword>\>/gj `for i in *; do file $i | grep -q text && echo "\"$i\""; done`
nmap <leader>l :AgFileDir <cword><CR>:copen<CR>
nmap <leader>g :GrepGit <cword><CR>:copen<CR>

" make
nmap <leader>m :wall<CR>:make<CR>

nmap <leader>a :A<CR>
nmap <leader>s :split<CR>
nmap <leader>v :vsplit<CR>

" man
source $VIMRUNTIME/ftplugin/man.vim
nmap <leader>M :Man <C-R><C-W><CR>

" write, quit
nmap <leader>w :w<CR>
nmap <leader>W :wa<CR>
nmap <leader>q :q<CR>
nmap <leader>Q :mksession!<CR>:wqa<CR>

" navigate windows
nmap <leader>k <C-W>k<C-w>=
nmap <leader>j <C-W>j<C-w>=
nmap <leader>x <C-W>_
nmap <leader>= <C-W>=

" collect lines
nmap <leader>y yy:tabnext<CR>p:tabprev<CR>

" toggle quickfix window (romainl/vim-qf)
nmap <leader>f <Plug>(qf_qf_toggle)

" comment/uncomment line (tpope/vim-commentary)
nmap <leader>c gcc

" open fugitive summary in a new tab
nmap <leader>G :tab Git<CR>

" navigate vcs diff hunks (mhinz/vim-signify)
nmap <leader>dj <plug>(signify-next-hunk)
nmap <leader>dk <plug>(signify-prev-hunk)


"{{{1 filetype

autocmd! FileType text      FileTypeText
autocmd! FileType markdown  FileTypeText
command! FileTypeText setlocal nonumber

autocmd! FileType arduino  FileTypeCode
autocmd! FileType c        FileTypeCode
autocmd! FileType cpp      FileTypeCode
autocmd! FileType cmake    FileTypeCode
autocmd! FileType html     FileTypeCode
autocmd! FileType qml      FileTypeCode
autocmd! FileType sh       FileTypeCode
autocmd! FileType zsh      FileTypeCode
autocmd! FileType vim      FileTypeCode
autocmd! FileType php      FileTypeCode
command! FileTypeCode set cindent

autocmd! FileType rust FileTypeRust
command! FileTypeRust set cindent

autocmd! FileType perl FileTypePerl
command! FileTypePerl
\	  setlocal iskeyword-=:
\	| setlocal cindent
\	| setlocal keywordprg=perldoc\ -f
\	| setlocal makeprg=perl\ -c\ %
\	| setlocal errorformat=
\%-G%.%#had\ compilation\ errors.,
\%-G%.%#syntax\ OK,
\%m\ at\ %f\ line\ %l.,
\%+A%.%#\ at\ %f\ line\ %l\\,%.%#,
\%+C%.%#

autocmd! FileType tex FileTypeTeX
command! FileTypeTeX setlocal makeprg=pdflatex\ -file-line-error\ -halt-on-error\ %


"{{{1 commands

command! Buffers
\ enew |
\ setl buftype=nofile |
\ set nobuflisted |
\ 0put =getbufinfo()->sort({ a, b -> b.lastused - a.lastused })->filter({ _, b -> !empty(b.name)})->map({ _, b -> fnamemodify(b.name, ':.')}) |
\ keepjumps $ |
\ delete _ |
\ keepjumps 0 |
\ nnoremap <buffer> <CR> :e <C-r>=getline('.')<CR><CR> |
\ nnoremap <buffer> dd :bdelete! <C-r>=getline('.')<CR><CR>:delete _<CR>

command! Old new +setl\ buftype=nofile | 0put =v:oldfiles | 0 | nnoremap <buffer> <CR> :e <C-r>=getline('.')<CR><CR>

command! -bar -nargs=1 AgFileDir
\   !cd "`dirname "%:p"`"; pwd; ag -s --color "\b<args>\b" 2> /dev/null \| less -F; true

command! -nargs=1 GrepGit
\   vimgrep! <args> `git ls-files "$(git rev-parse --show-toplevel)"`

command! Conflict /^\(=======$\|<<<<<<< \|>>>>>>> \)/

command! Gfixup !git commit --amend -C HEAD

command! AcentoToUtf
\  't,'Ts/\~a/ã/ge  |  't,'Ts/\~A/Ã/ge
\| 't,'Ts/\~o/õ/ge  |  't,'Ts/\~O/Õ/ge
\| 't,'Ts/\~n/ñ/ge  |  't,'Ts/\~N/Ñ/ge
\| 't,'Ts/\`a/à/ge  |  't,'Ts/\`A/À/ge
\| 't,'Ts/\^a/â/ge  |  't,'Ts/\^A/Â/ge
\| 't,'Ts/\^e/ê/ge  |  't,'Ts/\^E/Ê/ge
\| 't,'Ts/\^o/ô/ge  |  't,'Ts/\^O/Ô/ge
\| 't,'Ts/\'a/á/ge  |  't,'Ts/\'A/Á/ge
\| 't,'Ts/\'e/é/ge  |  't,'Ts/\'E/É/ge
\| 't,'Ts/\'i/í/ge  |  't,'Ts/\'I/Í/ge
\| 't,'Ts/\'o/ó/ge  |  't,'Ts/\'O/Ó/ge
\| 't,'Ts/\'u/ú/ge  |  't,'Ts/\'U/Ú/ge
\| 't,'Ts/\'c/ç/ge  |  't,'Ts/\'C/Ç/ge


"{{1 load local settings

if filereadable($HOME . "/.vim/vimrc.local")
	source ~/.vim/vimrc.local
endif


"}}}
" vim600:fdm=marker:fmr={{{,}}}:
