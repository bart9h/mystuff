" ~barrett/.vimrc
" TODO: regroup this mess bellow
" {{{1 basico

set nocompatible
set noswapfile

" {{{1  overwriteable by modeline

set foldmethod=syntax
set noignorecase

set modeline
set modelines=3


" {{{1 behaviour

let g:git_diff_spawn_mode=1
set title
set smartcase
set backspace="indent,eol,start"
set bs=2
set wildmenu
set wildmode=list:longest,full
"set tildeop
set hidden
set switchbuf=usetab

" {{{1 tab

set tabstop=4
set shiftwidth=4
set nosmarttab
set softtabstop=0


" {{{1 ident

set linebreak  " no horizontal scroll
set autoindent
"set cindent
set smartindent
inoremap # X#
  " do not ident # to the first column
set cinoptions=>s,e0,n0,f0,{0,}0,^0,:0,=s,l0,b0,g0,hs,ps,ts,is,+s,c3,C0,/0,(2s,us,U0,w0,W0,m0,j0,)20,*60


" {{{1 options

set history=1000
set visualbell t_vb=
set diffopt+=iwhite
if version >= 700
	let loaded_matchparen=1
	"let load_doxygen_syntax=1
	set diffopt+=vertical
endif

set grepprg=grep\ -nH\ $*
filetype on
filetype plugin on
filetype indent on
let g:netrw_sort_sequence="[\/]$,*,.bak$,.o$,.swp$,.obj$"
let g:netrw_list_hide= '^\.[^.].*'

" {{{1 filetype

filetype plugin on
autocmd! FileType c,cpp setlocal cindent
autocmd! FileType tex setlocal makeprg=pdflatex\ %\ &&\ xpdf\ -remote\ vim\ -reload
autocmd! FileType perl FileTypePerl
command! FileTypePerl setlocal makeprg=perl\ -c\ %
\	| setlocal keywordprg=perldoc\ -f
\	| setlocal cindent
\	| setlocal number
\	| setlocal errorformat=
\%-G%.%#had\ compilation\ errors.,
\%-G%.%#syntax\ OK,
\%m\ at\ %f\ line\ %l.,
\%+A%.%#\ at\ %f\ line\ %l\\,%.%#,
\%+C%.%#

"autocmd! BufEnter * resize
"autocmd! BufEnter * if expand("%:h") != "" && getbufvar("%", "buftype") == "file" | chdir %:h | endif
autocmd! BufWritePost ~/.vimrc,$ETC/vim/vimrc source ~/.vimrc
autocmd! BufWritePost ~/.vim/colors/my-elflord.vim,$ETC/vim/colors/my-elflord.vim colo my-elflord
"autocmd! BufWritePost /etc/apache2/httpd.conf !sudo sh /etc/rc.d/rc.httpd restart

"autocmd! BufRead,BufNewFile,BufEnter *.{c,cpp,h,javascript} call CSyntaxAfter()

"{{{2 vim -b : edit binary using xxd-format!
augroup Binary
au!
au BufReadPre  *.bin let &bin=1
au BufReadPost *.bin if &bin | %!xxd
au BufReadPost *.bin set ft=xxd | endif

au BufWritePre *.bin if &bin | %!xxd -r
au BufWritePre *.bin endif
au BufWritePost *.bin if &bin | %!xxd
au BufWritePost *.bin set nomod | endif
augroup END


" {{{1 aparencia

syntax enable
set ruler
set winminheight=0
set hlsearch
set scrolloff=2
set foldnestmax=1
set foldminlines=2
set nonumber
set showcmd

autocmd FocusLost * set number
autocmd FocusGained * set relativenumber

if version >= 700
	autocmd InsertLeave * set nocursorline
	autocmd InsertEnter * set cursorline

	"status line
	set laststatus=2
	set statusline=%<%f\ %h%m%r(%{GitBranchInfoTokens()[0]})%=%-14.(%l,%c%V%)\ %P
endif

" nao pisca sobre ([{pares}])
let loaded_matchparen=1

" pinta $variavels->{complexas} como variavel
let perl_extended_vars=1

if has("gui_running")
	set guioptions -=T
	set guifont=Inconsolata\ 12
	colorscheme darkblue
	hi CursorLine guibg=#0000b0 guifg=white
else
	set background=dark
	hi Cursor ctermbg=yellow ctermfg=black
	colorscheme my-elflord
endif

" hi link cComment Comment
" "hi link PerlComment Comment
" "hi PerlIdentifier ctermfg=white guifg=#ffffff
" hi PerlComment ctermfg=red guifg=#ff0000
" hi Comment ctermfg=cyan guifg=#a0c0f0

"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
"set laststatus=2 " always show the status line

highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/


" Add highlighting for function definition in C++
function! EnhanceCppSyntax()
	syn match cppFuncDef "::\~\?\zs\h\w*\ze\s*([^)]*\()\s*\(const\|:\)\?\)\?$"
	hi def link cppFuncDef Special
endfunction

autocmd Syntax cpp call EnhanceCppSyntax()


" {{{1 key mappings

noremap ' `
noremap ` '

"disable ex mode
nnoremap Q <nop>

nnoremap <c-d> <c-d><c-d>

nnoremap <C-L> :nohls<CR><C-L>

nmap <tab> :tabnext<CR>

" toggle spell cheching
nmap <F8> :set spelllang=en spell!<CR>

" close/open folders
nmap <space> za

" quick macro
nmap <F9> @q

" search for current word on all source files
nmap <C-c> :!cd "`dirname "%:p"`"; grep -n "\<<cword>\>" *.[cChd] *.cpp *.cxx *.pl *.pm *.java *.pc *.f 2> /dev/null; true<CR>

" makes * highlight the word, but don't jump to next occurrence
"map <silent> * yiw:let @/="\\<".@0."\\>"<CR>:set hls<CR>
map <silent> * *N

" save
if has("gui_running")  " Ctrl-S don't work on terminals
	nmap <C-s> :update<CR>
endif

" navigate through long lines
nmap <Down> gj
nmap <Up> gk
imap <Down> <ESC>gja
imap <Up> <ESC>gka

" rotate windows
nmap <C-k> <C-W>r<C-W>k<C-w>_
nmap <C-j> <C-W>j<C-W>R<C-w>_
imap <C-k> <ESC><C-k>
imap <C-j> <ESC><C-j>

" resize window
nmap <C-kPlus> <C-W>+
nmap <C-kMinus> <C-W>-
nmap <+> <C-W>+
nmap <-> <C-W>-

" make
nmap <C-n> :wall<CR>:make<CR>
"nmap <C-n> :update<CR>:make %:r.o<CR>
"TODO: se terminar sem arquivo carregado, :q<CR>
imap <C-n> <ESC><C-n>
nmap , :cn<CR>

" quit
nmap <C-x> :q<CR>
imap <C-x> <ESC>:q<CR>

nmap M :Man <C-R><C-W><CR>

vmap <f1> "ay
vmap <f2> "by:tabnew<CR>"bP:diffthis<CR>:set buftype=nofile<CR>:vnew<CR>"aP:set buftype=nofile<CR>:diffthis<CR>


" {{{1 commands

command! Conflict /^\(=======$\|<<<<<<< \|>>>>>>> \)/
command! Todo /\<\(TODO\|FIXME\|XXX\|HACK\)\>/

command! GD
\  GitDiff
\| set filetype=diff
\| set buftype=nofile

command! GDS
\  GitDiff --staged
\| set filetype=diff
\| set buftype=nofile

command! SudoW w !sudo tee % >/dev/null

command! ToAscii
\ 	%s///
\|	%s/«/``/
\|	%s/»/''/

command! -bar -nargs=1 DoMan %!/usr/bin/man -a -S 3:2:1:5:8:4:7:6:9 -P cat <args>
command! -bar -nargs=1 Man
\   new
\|  DoMan <args>
\|  set filetype=man
\|  set buftype=nofile
\|  set foldmethod=indent
\|  goto 1
\|  %s/.//g

command! ToHtml
\ HtmlToAcento
\| %s/<[^>]*>//g
\| %s/&nbsp;/\ /ge
\| %s/&gt;/>/ge
\| %s/&lt;/</ge
"\| %s/&\(.\)[a-z]*;/\1/ge

command! AcentoToHtml
\  %s/\~a/\&atilde;/ge  |  %s/\~A/\&Atilde;/ge
\| %s/\~o/\&otilde;/ge  |  %s/\~O/\&Otilde;/ge
\| %s/\~n/\&ntilde;/ge  |  %s/\~N/\&Ntilde;/ge
\| %s/\`a/\&agrave;/ge  |  %s/\`A/\&Agrave;/ge
\| %s/\^a/\&acirc;/ge   |  %s/\^A/\&Acirc;/ge
\| %s/\^e/\&ecirc;/ge   |  %s/\^E/\&Ecirc;/ge
\| %s/\^o/\&ocirc;/ge   |  %s/\^O/\&Ocirc;/ge
\| %s/\'a/\&aacute;/ge  |  %s/\'A/\&Aacute;/ge
\| %s/\'e/\&eacute;/ge  |  %s/\'E/\&Eacute;/ge
\| %s/\'i/\&iacute;/ge  |  %s/\'I/\&Iacute;/ge
\| %s/\'o/\&oacute;/ge  |  %s/\'O/\&Oacute;/ge
\| %s/\'u/\&uacute;/ge  |  %s/\'U/\&Uacute;/ge
\| %s/\'c/\&ccedil;/ge  |  %s/\'C/\&Ccedil;/ge

command! HtmlToAcento
\  %s/&atilde;/\~a/ge  |  %s/&Atilde;/\~A/ge
\| %s/&otilde;/\~o/ge  |  %s/&Otilde;/\~O/ge
\| %s/&ntilde;/\~n/ge  |  %s/&Ntilde;/\~N/ge
\| %s/&agrave;/\`a/ge  |  %s/&Agrave;/\`A/ge
\| %s/&acirc;/\^a/ge   |  %s/&Acirc;/\^A/ge
\| %s/&ecirc;/\^e/ge   |  %s/&Ecirc;/\^E/ge
\| %s/&ocirc;/\^o/ge   |  %s/&Ocirc;/\^O/ge
\| %s/&aacute;/\'a/ge  |  %s/&Aacute;/\'A/ge
\| %s/&eacute;/\'e/ge  |  %s/&Eacute;/\'E/ge
\| %s/&iacute;/\'i/ge  |  %s/&Iacute;/\'I/ge
\| %s/&oacute;/\'o/ge  |  %s/&Oacute;/\'O/ge
\| %s/&uacute;/\'u/ge  |  %s/&Uacute;/\'U/ge
\| %s/&ccedil;/\'c/ge  |  %s/&Ccedil;/\'C/ge

command! AcentoToUtf
\  %s/\~a/ã/ge  |  %s/\~A/Ã/ge
\| %s/\~o/õ/ge  |  %s/\~O/Õ/ge
\| %s/\~n/ñ/ge  |  %s/\~N/Ñ/ge
\| %s/\`a/à/ge  |  %s/\`A/À/ge
\| %s/\^a/â/ge  |  %s/\^A/Â/ge
\| %s/\^e/ê/ge  |  %s/\^E/Ê/ge
\| %s/\^o/ô/ge  |  %s/\^O/Ô/ge
\| %s/\'a/á/ge  |  %s/\'A/Á/ge
\| %s/\'e/é/ge  |  %s/\'E/É/ge
\| %s/\'i/í/ge  |  %s/\'I/Í/ge
\| %s/\'o/ó/ge  |  %s/\'O/Ó/ge
\| %s/\'u/ú/ge  |  %s/\'U/Ú/ge
\| %s/\'c/ç/ge  |  %s/\'C/Ç/ge

command! AcentoToUtfT
\  't,'Ts/\~a/ã/ge  |  't,'Ts/\~A/Ã/ge
\| 't,'Ts/\~o/õ/ge  |  't,'Ts/\~O/Õ/ge
\| 't,'Ts/\~n/ñ/ge  |  't,'Ts/\~N/Ñ/ge
\| 't,'Ts/\`a/à/ge  |  't,'Ts/\`A/À/ge
\| 't,'Ts/\^a/â/ge  |  't,'Ts/\^A/Â/ge
\| 't,'Ts/\^e/ê/ge  |  't,'Ts/\^E/Ê/ge
\| 't,'Ts/\^o/ô/ge  |  't,'Ts/\^O/Ô/ge
\| 't,'Ts/\'a/á/ge  |  't,'Ts/\'A/Á/ge
\| 't,'Ts/\'e/é/ge  |  't,'Ts/\'E/É/ge
\| 't,'Ts/\'i/í/ge  |  't,'Ts/\'I/Í/ge
\| 't,'Ts/\'o/ó/ge  |  't,'Ts/\'O/Ó/ge
\| 't,'Ts/\'u/ú/ge  |  't,'Ts/\'U/Ú/ge
\| 't,'Ts/\'c/ç/ge  |  't,'Ts/\'C/Ç/ge

"command! Tex


" {{{1 deprecated

"function! InsertTabWrapper(direction)
"	let col = col('.') - 1
"	if !col || getline('.')[col - 1] !~ '\k'
"		return "\<tab>"
"	elseif "backward" == a:direction
"		return "\<c-p>"
"	else
"		return "\<c-n>"
"	endif
"endfunction

"inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
"inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>

"so ~/minibufexpl.vim
"let g:miniBufExplMapCTabSwitchBuffs = 1
"let g:explVertical=1
"let g:explWinSize=35

"set restorescreen
"set t_ti=7[r[?47h t_te=[?47l8
"set t_ti=1
"set t_te=1


" {{{1 load local settings

if filereadable($HOME . "/.vimrc_local")
	source ~/.vimrc_local
endif


"}}}
" vim600:fdm=marker:fmr={{{,}}}:
